// Code generated by MockGen. DO NOT EDIT.
// Source: youtube_client_repository.go
//
// Generated by this command:
//
//	mockgen -source=youtube_client_repository.go -destination=../mocks/mock_youtube_client_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	youtube "google.golang.org/api/youtube/v3"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// VideoList mocks base method.
func (m *MockClient) VideoList(ctx context.Context, part, id []string) (*youtube.VideoListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VideoList", ctx, part, id)
	ret0, _ := ret[0].(*youtube.VideoListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VideoList indicates an expected call of VideoList.
func (mr *MockClientMockRecorder) VideoList(ctx, part, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VideoList", reflect.TypeOf((*MockClient)(nil).VideoList), ctx, part, id)
}
